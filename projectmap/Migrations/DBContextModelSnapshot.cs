// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projectmap.Models;

#nullable disable

namespace projectmap.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("projectmap.Models.ImageRepair", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Repair_id")
                        .HasColumnType("int");

                    b.Property<string>("cretoredit")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("image")
                        .HasColumnType("longtext");

                    b.Property<string>("publicId")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("Repair_id");

                    b.ToTable("imagerepairs");
                });

            modelBuilder.Entity("projectmap.Models.RepairDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("FaultCodes")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("FaultReportingTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MaintenanceEngineer")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RepairCompletionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("RepairStatus")
                        .HasColumnType("int");

                    b.Property<int?>("TE_id")
                        .HasColumnType("int");

                    b.Property<string>("cretoredit")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.HasIndex("MaintenanceEngineer");

                    b.HasIndex("TE_id");

                    b.ToTable("repairdetails");
                });

            modelBuilder.Entity("projectmap.Models.RepairRecord", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Engineer_id")
                        .HasColumnType("int");

                    b.Property<string>("NotificationRecord")
                        .HasColumnType("longtext");

                    b.Property<string>("Picture")
                        .HasColumnType("longtext");

                    b.Property<string>("PublicId")
                        .HasColumnType("longtext");

                    b.Property<int?>("RD_id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RecordTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TE_id")
                        .HasColumnType("int");

                    b.Property<string>("cretoredit")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.HasIndex("Engineer_id");

                    b.HasIndex("RD_id");

                    b.HasIndex("TE_id");

                    b.ToTable("repairrecords");
                });

            modelBuilder.Entity("projectmap.Models.TrafficEquipment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Area_Level3_1")
                        .HasColumnType("longtext");

                    b.Property<string>("Area_Level3_2")
                        .HasColumnType("longtext");

                    b.Property<int?>("CategoryCode")
                        .HasColumnType("int");

                    b.Property<int?>("DataStatus")
                        .HasColumnType("int");

                    b.Property<string>("District_1")
                        .HasColumnType("longtext");

                    b.Property<string>("District_2")
                        .HasColumnType("longtext");

                    b.Property<double?>("IdentificationCode")
                        .HasColumnType("double");

                    b.Property<int?>("JobClassification")
                        .HasColumnType("int");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double");

                    b.Property<double?>("Length")
                        .HasColumnType("double");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("ManagementUnit")
                        .HasColumnType("longtext");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<string>("Road_1")
                        .HasColumnType("longtext");

                    b.Property<string>("Road_2")
                        .HasColumnType("longtext");

                    b.Property<int?>("SignalInstallation")
                        .HasColumnType("int");

                    b.Property<string>("SignalNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("SpecialPOI")
                        .HasColumnType("longtext");

                    b.Property<string>("TypesOfSignal")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UseStatus")
                        .HasColumnType("int");

                    b.Property<string>("cretoredit")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("timePosition")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.ToTable("trafficequipments");
                });

            modelBuilder.Entity("projectmap.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Identity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserStatus")
                        .HasColumnType("int");

                    b.Property<string>("cretoredit")
                        .HasColumnType("longtext");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("projectmap.Models.ImageRepair", b =>
                {
                    b.HasOne("projectmap.Models.RepairDetails", "repairDetails")
                        .WithMany("ImageRepairs")
                        .HasForeignKey("Repair_id");

                    b.Navigation("repairDetails");
                });

            modelBuilder.Entity("projectmap.Models.RepairDetails", b =>
                {
                    b.HasOne("projectmap.Models.User", "user")
                        .WithMany("RepairDetails")
                        .HasForeignKey("MaintenanceEngineer")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("projectmap.Models.TrafficEquipment", "trafficEquipment")
                        .WithMany("RepairDetails")
                        .HasForeignKey("TE_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("trafficEquipment");

                    b.Navigation("user");
                });

            modelBuilder.Entity("projectmap.Models.RepairRecord", b =>
                {
                    b.HasOne("projectmap.Models.User", "user")
                        .WithMany("RepairRecords")
                        .HasForeignKey("Engineer_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("projectmap.Models.RepairDetails", "repairDetails")
                        .WithMany("RepairRecords")
                        .HasForeignKey("RD_id");

                    b.HasOne("projectmap.Models.TrafficEquipment", "trafficEquipment")
                        .WithMany("RepairRecords")
                        .HasForeignKey("TE_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("repairDetails");

                    b.Navigation("trafficEquipment");

                    b.Navigation("user");
                });

            modelBuilder.Entity("projectmap.Models.RepairDetails", b =>
                {
                    b.Navigation("ImageRepairs");

                    b.Navigation("RepairRecords");
                });

            modelBuilder.Entity("projectmap.Models.TrafficEquipment", b =>
                {
                    b.Navigation("RepairDetails");

                    b.Navigation("RepairRecords");
                });

            modelBuilder.Entity("projectmap.Models.User", b =>
                {
                    b.Navigation("RepairDetails");

                    b.Navigation("RepairRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
